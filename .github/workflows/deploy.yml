name: CI-CD

on:
  push:
    branches: [ "main", "staging" ]

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Suffix for secrets
        id: set_suffix
        shell: bash
        run: |
          if [[ ${GITHUB_REF##*/} == 'main' ]]
          then echo "suffix=" >> $GITHUB_OUTPUT
          else echo "suffix=_STAGING" >> $GITHUB_OUTPUT
          fi
      - name: Profiles of branch
        id: set_profiles
        shell: bash
        run: |
          if [[ ${GITHUB_REF##*/} == 'main' ]]
          then echo "profiles=prod" >> $GITHUB_OUTPUT
          else echo "profiles=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set up AWS configuration
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Commit hash for Docker tag
        id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Set up Docker CLI
        uses: docker/setup-buildx-action@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test

      - name: Build & Push Docker Image on ECR
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets[format('AWS_ECR{0}', steps.set_suffix.outputs.suffix)] }}
          docker build --build-arg PROFILES=${{ steps.set_profiles.outputs.profiles }} -t ${{ secrets[format('AWS_ECR{0}', steps.set_suffix.outputs.suffix)] }}:${{ steps.commit.outputs.short }} .
          docker push ${{ secrets[format('AWS_ECR{0}', steps.set_suffix.outputs.suffix)] }}:${{ steps.commit.outputs.short }}

      - name: (Staging case) Restart staging EC2 instace & RDS
        if: ${GITHUB_REF##*/} == 'staging'
        continue-on-error: true
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_ID_STAGING }}
          aws rds start-db-instance --db-instance-identifier $ {{ secrets.RDS_ID_STAGING }}

      - name: Pull image on EC2 & Run
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets[format('EC2_HOST{0}', steps.set_suffix.outputs.suffix)] }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            docker image rm $(docker images -a -q)
            aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets[format('AWS_ECR{0}', steps.set_suffix.outputs.suffix)] }}:${{ steps.commit.outputs.short }}
            docker pull ${{ secrets[format('AWS_ECR{0}', steps.set_suffix.outputs.suffix)] }}:${{ steps.commit.outputs.short }}
            docker run \
              -dp 80:8080 \
              -e MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} \
              -e MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} \
              -e JWT_ISSUER=${{ secrets.JWT_ISSUER }} \
              -e JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }} \
              -e JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }} \
              -e SQL_HOST=${{ secrets[format('SQL_HOST{0}', steps.set_suffix.outputs.suffix)] }} \
              -e SQL_DB=${{ secrets[format('SQL_DB{0}', steps.set_suffix.outputs.suffix)] }} \
              -e SQL_USERNAME=${{ secrets[format('SQL_USERNAME{0}', steps.set_suffix.outputs.suffix)] }} \
              -e SQL_PASSWORD=${{ secrets[format('SQL_PASSWORD{0}', steps.set_suffix.outputs.suffix)] }} \
              -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              -e NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} \
              -e NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }} \
              -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
              -e GIT_CLIENT_ID=${{ secrets.GIT_CLIENT_ID }} \
              -e GIT_CLIENT_SECRET=${{ secrets.GIT_CLIENT_SECRET }} \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e BUCKET_NAME=${{ secrets.BUCKET_NAME }} \
              ${{ secrets[format('AWS_ECR{0}', steps.set_suffix.outputs.suffix)] }}:${{ steps.commit.outputs.short }}